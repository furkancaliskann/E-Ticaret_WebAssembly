@page "/changepassword"
@using E_Ticaret_WebAssembly.Dtos
@using E_Ticaret_WebAssembly.Dtos.User
@inject AuthState AuthState
@inject NavigationManager NavManager
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Şifreyi Değiştir</PageTitle>

<style>
    .container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 20px;
    box-sizing: border-box;
    }

    .content-wrapper {
    width: 100%;
    max-width: 500px;
    padding: 20px;
    border-radius: 10px;
    background-color: #ffffff;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    margin-top: 40px;
    }

    h3 {
    font-size: 2rem;
    font-weight: 600;
    color: #007bff;
    margin-bottom: 20px;
    text-align: center;
    }

    .form-group {
    margin-bottom: 15px;
    }

    input.form-control {
    font-size: 1rem;
    padding: 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    width: 100%;
    }

    input.form-control:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
    }

    button.btn-primary {
    font-size: 1.1rem;
    padding: 10px 20px;
    border-radius: 5px;
    width: 100%;
    margin-top: 15px;
    }

    .text-center.text-success {
    font-size: 1rem;
    color: #28a745;
    font-weight: bold;
    text-align: center;
    }
</style>

<div class="container">
    <div class="content-wrapper">
        <h3 class="text-primary">ŞİFREYİ DEĞİŞTİR</h3>

        @if (!string.IsNullOrEmpty(message))
        {
            <p class="text-success">@message</p>
        }

        <div class="form-group mb-4">
            <input @bind="oldPassword" type="password" placeholder="Eski Şifre" class="form-control" />
        </div>

        <div class="form-group mb-4">
            <input @bind="newPassword" type="password" placeholder="Yeni Şifre" class="form-control" />
        </div>

        <div>
            <button @onclick="Change" class="btn btn-primary">Değiştir</button>
        </div>
    </div>
</div>

@code {
    private string oldPassword = "";
    private string newPassword = "";
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        var getUserDto = await AuthState.GetAuthenticationStateAsync();

        if (getUserDto == null)
            NavManager.NavigateTo("/login");
    }

    private async Task Change()
    {
        var username = await JS.InvokeAsync<string>("localStorage.getItem", "Username");

        if (username == null || oldPassword == null) return;

        ChangePasswordDto changePasswordDto = new ChangePasswordDto();
        changePasswordDto.KullaniciAdi = username;
        changePasswordDto.EskiParola = oldPassword;
        changePasswordDto.YeniParola = newPassword;

        try
        {
            var response = await Http.PostAsJsonAsync("https://localhost:7144/api/users/changepassword", changePasswordDto);

            if (response.IsSuccessStatusCode)
            {
                message = "Şifre başarıyla değiştirildi!";
                await AuthState.MarkUserAsAuthenticated(username, newPassword);
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<Result>();

                message = result?.ErrorMessage ?? "Bilinmeyen bir hata oluştu.";
            }

            oldPassword = "";
            newPassword = "";
        }
        catch (Exception ex)
        {
            message = $"Bir hata oluştu: {ex.Message}";
        }
    }
}
